#!/bin/bash
##H Usage: manage ACTION [ARG] [SECURITY-STRING]
##H
##H Available actions:
##H   help            show this help
##H   version         get current version of the service
##H   status          show current service's status
##H   sysboot         start server from crond if not running
##H   restart         (re)start the service
##H   start           (re)start the service
##H   stop            stop the service
##H   pushapps        push couch applications
##H   pushreps        push couch replications
##H   compact         compact database ARG
##H   compactviews    compact database views for design doc ARG ARG
##H   cleanviews      clean view named ARG
##H
##H For more details please refer to the alarming procedures page:
##H   https://cern.ch/cms-http-group/ops-alarms.html

if [ $(id -un)  = cmsweb ]; then
  echo "ERROR: please use another account" 1>&2
  exit 1
fi

echo_e=-e
case $(uname) in Darwin )
  md5sum() { md5 -r ${1+"$@"}; }
  echo_e=
  ;;
esac

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
CFGDIR=$(cd $(dirname $0) && pwd)
LOGDIR=$TOP/logs/$ME
STATEDIR=$TOP/state/$ME
COOKIEFILE=$ROOT/auth/$ME/erlang.cookie
COLOR_OK="\\033[0;32m"
COLOR_WARN="\\033[0;31m"
COLOR_NORMAL="\\033[0;39m"

PORT=5985
ADMPORT=5986
. $ROOT/apps/$ME/etc/profile.d/init.sh
export BIGCOUCH_ROOT
export COOKIEFILE

# Detect core count
CORES=`grep -E "^processor" /proc/cpuinfo |wc -l`
if [ "$CORES" = "1" ]; then
    BEAM=beam
else
    BEAM=beam.smp
fi

# Start service conditionally on crond restart.
sysboot()
{
  dostart=false
  if [ $(pgrep -u $(id -u) -f " bigcouch" | wc -l) = 0 ]; then
      dostart=true
  fi
  $dostart && start
}

start() {
    echo "Starting $ME"
    cd $CFGDIR # otherwise bigcouch cannot find vm.args
    # it should eventually pipe to rotatelogs, when couch supports it
    $BIGCOUCH_ROOT/bin/bigcouch 2>&1 1>& /dev/null < /dev/null &

    push_apps
}

stop() {
    echo "Stopping $ME"
    for pid in $(pgrep -u $(id -u) -f " bigcouch"); do
        kill -9 $pid
    done
    for pid in $(pgrep -u $(id -u) -f "[/]epmd"); do
        kill -9 $pid
    done
}

status() {
    pid=$(pgrep -u $(id -u) -f " bigcouch" | sort -n)
    if [ X"$pid" = X ]; then
        echo $echo_e "$ME $pat is ${COLOR_WARN}NOT RUNNING${COLOR_NORMAL}."
    else
        echo $echo_e "$ME $pat is ${COLOR_OK}RUNNING${COLOR_NORMAL}, PID" $pid
    fi
}

# When a view is changed, such as a new app version is deployed,
# invoke this to clean up the views in that database.
clean_views()
{
  local database=$1
  [ -n "$database" ] ||
    { echo "You must specify the database you wish to clean the views "; exit 1; }

  curl -s -H "Content-Type: application/json" -X POST http://localhost:$PORT/$database/_view_cleanup | \
       grep -q '{"ok":true}' ||
    { echo "An error occured while cleaning the views. Please look in the BigCouch logs."; exit 3; }
}

# Push applications from staging area into bigcouch.
push_apps()
{
  n=0 started=false
  while [ $n -le 100 ]; do
    test -n "$(pgrep -u $(id -u) -f ' bigcouch' | sort -n)" &&
      curl -s localhost:$PORT | grep -q '{"couchdb":"Welcome","version":"BigCouchTarball","bigcouch":"[0-9.]*"}' &&
      started=true && break
    echo "waiting for bigcouch..."
    sleep 1
    n=$(expr $n + 1)
  done

  if $started; then
    for APP in $STATEDIR/stagingarea/*; do
      [ -f $APP ] || continue
      . $APP
      for DB in $(egrep -o 'PORT/.*$' $APP | cut -d/ -f2); do
        clean_views $DB
      done
    done
  else
    echo "bigcouch did not start, not pushing application"
    exit 1
  fi
}

# Verify the security string.
check()
{
  CHECK=$(echo "$1" | md5sum | awk '{print $1}')
  if [ $CHECK != 94e261a5a70785552d34a65068819993 ]; then
    echo "$0: cannot complete operation, please check documentation." 1>&2
    exit 2;
  fi
}

# Main routine, perform action requested on command line.
case ${1:-status} in
    sysboot )
        sysboot
        ;;

    status)
        status
        ;;

    start | restart )
        check "$2"
        stop
        sleep 1
        start
        ;;

    stop)
        check "$2"
        stop
        ;;

    cleanviews )
        check "$3"
        clean_views $2
        ;;

    pushapps )
        check "$2"
        push_apps
        ;;

    help )
        perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
        ;;

    version )
        echo "$BIGCOUCH_VERSION"
        ;;

    * )
        echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
        exit 1
        ;;
esac

exit $?
