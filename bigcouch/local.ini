[couchdb]
database_dir = {ROOT}/state/bigcouch/database
view_index_dir = {ROOT}/state/bigcouch/database
uri_file = {ROOT}/state/bigcouch/couch.uri
max_document_size = 67108864
os_process_timeout = 5000
max_dbs_open = 500
delayed_commits = false

[cluster]
; Default number of shards for a new database
q = 8
; Default number of copies of each shard
n = 2

[chttpd]
bind_address = 0.0.0.0
port = 5985
docroot = {ROOT}/current/apps/bigcouch/share/www
; Options for the MochiWeb HTTP server.
;server_options = [{backlog, 128}, {acceptor_pool_size, 16}]
; For more socket options, consult Erlang's module 'inet' man page.
;socket_options = [{recbuf, 262144}, {sndbuf, 262144}, {nodelay, true}]
;
; You can't specify the authentication handlers for chttpd as it does
; not make it as an option like on the [httpd] section.
; The hardcoded handlers are the following:
;  {couch_cms_auth, cms_host_authentication_hander}
;  {couch_cms_auth, cms_backend_authentication_handler}
;
; The host handler is always checked first, then the backend handler.
; For this reason it is important that you never change the
; passthrough rules below under [couch_cms_auth].

[couch_cms_auth]
; This drives the cms host and backend authentication handlers for chttpd.
; Only requests made through localhost get the _admin role and therefore
; can create databases, set replications, etc.
allowed_hosts = {127.0.0.1, _admin, _admin},{localhost, _admin, _admin}
allow_host_passthrough = true
allow_backend_passthrough = false
validate_hmac = true

; httpd is the admin daemon, or couch back door, that should only be accessible
; through localhost.
[httpd]
bind_address = 127.0.0.1
port = 5986
; we accept everything coming from localhost, so just set it to null auth handler
authentication_handlers = {couch_httpd_auth, null_authentication_handler}
default_handler = {couch_httpd_db, handle_request}
secure_rewrites = true
vhost_global_handlers = _utils, _uuids
allow_jsonp = false
log_max_chunk_size = 1000000

[log]
file = {ROOT}/logs/bigcouch/couch.log
level = info
include_sasl = true

; The ssl stanza is only needed when replicating offsite to/from central couch
;[ssl]
;cert_file = {ROOT}/state/bigcouch/proxy/proxy.cert
;key_file = {ROOT}/state/bigcouch/proxy/proxy.cert
;cacert_file = {ROOT}/state/bigcouch/proxy/proxy.cert

[replicator]
db = _replicator
; Maximum replicaton retry count can be a non-negative integer or "infinity".
max_replication_retry_count = infinity
max_http_sessions = 20
max_http_pipeline_size = 50
; set to true to validate peer certificates
verify_ssl_certificates = false
; file containing a list of peer trusted certificates (PEM format)
; ssl_trusted_certificates_file = /etc/ssl/certs/ca-certificates.crt
; maximum peer certificate depth (must be set even if certificate validation is off)
ssl_certificate_max_depth = 3

; this is needed to write native views in erlang, which is much more fast
; than javascript views
[native_query_servers]
erlang = {couch_native_process, start_link, []}

;
; Begin of boilerplate configuration. We should not worry about it.
;
[query_servers]
javascript = {ROOT}/current/apps/bigcouch/bin/couchjs {ROOT}/current/apps/bigcouch/share/couchjs/main.js

[query_server_config]
reduce_limit = true
os_process_soft_limit = 100

[daemons]
view_manager={couch_view, start_link, []}
external_manager={couch_external_manager, start_link, []}
query_servers={couch_proc_manager, start_link, []}
httpd={couch_httpd, start_link, []}
stats_aggregator={couch_stats_aggregator, start, []}
stats_collector={couch_stats_collector, start, []}
uuids={couch_uuids, start, []}
replication_manager={couch_replication_manager, start_link, []}
vhosts={couch_httpd_vhost, start_link, []}
;os_daemons={couch_os_daemons, start_link, []}

[httpd_global_handlers]
/ = {couch_httpd_misc_handlers, handle_welcome_req, <<"Welcome">>}
favicon.ico = {couch_httpd_misc_handlers, handle_favicon_req, "{ROOT}/current/apps/bigcouch/share/www"}

_utils = {couch_httpd_misc_handlers, handle_utils_dir_req, "{ROOT}/current/apps/bigcouch/share/www"}
_all_dbs = {couch_httpd_misc_handlers, handle_all_dbs_req}
_active_tasks = {couch_httpd_misc_handlers, handle_task_status_req}
;_config = {couch_httpd_misc_handlers, handle_config_req}
_replicate = {couch_httpd_misc_handlers, handle_replicate_req}
_uuids = {couch_httpd_misc_handlers, handle_uuids_req}
_restart = {couch_httpd_misc_handlers, handle_restart_req}
_stats = {couch_httpd_stats_handlers, handle_stats_req}
_log = {couch_httpd_misc_handlers, handle_log_req}
;_oauth = {couch_httpd_oauth, handle_oauth_req}
_system = {chttpd_misc, handle_system_req}

[httpd_db_handlers]
_view_cleanup = {couch_httpd_db, handle_view_cleanup_req}
_compact = {couch_httpd_db, handle_compact_req}
_design = {couch_httpd_db, handle_design_req}
_temp_view = {couch_httpd_view, handle_temp_view_req}
_changes = {couch_httpd_db, handle_changes_req}

[httpd_design_handlers]
_view = {couch_httpd_view, handle_view_req}
_show = {couch_httpd_show, handle_doc_show_req}
_list = {couch_httpd_show, handle_view_list_req}
_info = {couch_httpd_db,   handle_design_info_req}
_rewrite = {couch_httpd_rewrite, handle_rewrite_req}
_update = {couch_httpd_show, handle_doc_update_req}

; enable external as an httpd handler, then link it with commands here.
; note, this api is still under consideration.
; [external]
; mykey = /path/to/mycommand

; Here you can setup commands for CouchDB to manage
; while it is alive. It will attempt to keep each command
; alive if it exits.
; [os_daemons]
; some_daemon_name = /path/to/script -with args


[uuids]
; Known algorithms:
;   random - 128 bits of random awesome
;     All awesome, all the time.
;   sequential - monotonically increasing ids with random increments
;     First 26 hex characters are random. Last 6 increment in
;     random amounts until an overflow occurs. On overflow, the
;     random prefix is regenerated and the process starts over.
;   utc_random - Time since Jan 1, 1970 UTC with microseconds
;     First 14 characters are the time in hex. Last 18 are random.
algorithm = sequential

[stats]
; rate is in milliseconds
rate = 1000
; sample intervals are in seconds
samples = [0, 60, 300, 900]

[attachments]
compression_level = 8 ; from 1 (lowest, fastest) to 9 (highest, slowest), 0 to disable compression
compressible_types = text/*, application/javascript, application/json, application/xml

