#!/usr/bin/env python2.6 

import re
import urllib2
import time
import sys

CONFIG_URL='http://cmsdoc.cern.ch/cms/LCG/crab/config/'
###############################################################################
#### Gettin the List of Available Crab Servers from CONFIG_URL
###############################################################################
def getAvailableServers():
  """get a list of available crab servers"""
  url = "%sAvailableServerList" % CONFIG_URL

  try:
    f = urllib2.urlopen(url)
    serverlist = f.read()
  except:
    sys.stderr.write('Error reading available servers list')
    sys.exit(1)

  # remove all comments 
  serverlist = re.sub(re.compile("#.*?\n", re.MULTILINE ) ,"" , serverlist)
  serverlist = serverlist.splitlines()
  crabservers = []
  for server in serverlist:
    serverinfo = server.split(" ")
    if serverinfo[2] != 'remoteGlidein':
      crabservers.append({'server': serverinfo[0],
                          'version': serverinfo[1],
                          'scheduler': serverinfo[2]})
  return crabservers

###############################################################################
### Getting the Server configuraion file for each CrabServer from CONFIG URL
###############################################################################
def getServerConfig(serverName):
  """get configuration file for a given CRAB server"""
  url = '%sserver_%s.conf' % ( CONFIG_URL, serverName )
  try:
    f = urllib2.urlopen(url)
    # restore the dictionarie with configuration
    # for CRAB server into a new dictionarie
    config = eval(f.read())
    return config
  except Exception,e:
    sys.stderr.write('Error loading config file for %s - url: %s\n%s' % (serverName, url,e))
    sys.exit(1)

    return None

###############################################################################
### Getting the information about Crab Tasks during last 24 hours
###############################################################################
def crabTaskStatus(serverName):
  """get information about CRAB task in the last 1 day"""
  # table cells to parse from CRAB server 
  # in "All Tasks per status for Last 1 days"
  fieldsToParse = {
    'server':"",
    'ended':0,
    'submitted':0,
    'submitting':0,
    'partially_killed':0,
    'not_submitted':0,
    'totalTask':0,
    'urlavail':1
  }
  
  fieldsToParse['server'] = serverName
  url = 'http://%s:8888/taskgraph/?tasktype=All&length=1&span=days&type=list' \
        % ( serverName )
  try:
    f = urllib2.urlopen(url)
    source = f.read()
  except Exception, e:
    fieldsToParse['urlavail'] = 0
    return fieldsToParse 

#  fieldsToParse['server'] = serverName
  m=re.findall('<td>([a-zA-Z0-9_ ]+)</td><td>([0-9]+)</td></tr>',source)
  for (k,v) in m:
    key=re.sub(r'\s','_',k)
    fieldsToParse[key]=int(v)
  return fieldsToParse

###############################################################################
### Getting the information about Total Number of Tasks during last 24 hours
###############################################################################
def crabTotalTasks(serverName):
  """get information about CRAB task in the last 1 day"""
  # table cells to parse from CRAB server 
  # in "All Tasks per status for Last 1 days"
  
  fieldsToParse = {'urlavail':1,'server':""}
  totalTasks = 0
  
  fieldsToParse['server'] = serverName
  url = 'http://%s:8888/taskgraph/?tasktype=All&length=1&span=days&type=list' \
        % ( serverName )
  try:
    f = urllib2.urlopen(url)
    source = f.read()
  except Exception, e:
     fieldsToParse['urlavail'] = 0
     return fieldsToParse


  m=re.findall('<h4>([a-zA-Z_ :]+)([ 0-9]+)</h4>',source)
  for (k,v) in m:
    key=re.sub(r'\s|:','',k)
    totalTasks = int(v)
  fieldsToParse['totalTasks'] = totalTasks
  return fieldsToParse

###############################################################################
### Getting the MsgQueue information from a specific CrabServer
###############################################################################
def msgQueueParser(crabUrl):
  """get all status from a given CRAB server and parse the message queue"""
  temp = {'server':"",'urlavail':1} 
  try:
    crabPage = urllib2.urlopen("http://%s:8888/compstatus/"%crabUrl)
    source = crabPage.read()
    m=re.search('Messages by destination.*</table>',source,re.DOTALL)
    lasttable=m.group(0)
    m=re.findall('<td>([a-zA-Z0-9_ :]+)</td><td>([0-9]+)</td>',lasttable,re.DOTALL)
  except Exception, e:
    temp['server'] = crabUrl 
    temp['urlavail'] = 0
    return temp

  total = 0
  for (k,v) in m:
    total += int(v)
    temp[re.sub(r'\s|:', '', k)] = int(v)
  temp['total'] = total

  return temp


###############################################################################
### Getting the queue of jobs in GetOutput from a specific CrabServer
###############################################################################

def GOQueueParser(crabUrl):
  """get all status from a given CRAB server and parse the message queue"""
  temp = {'server':"",'urlavail':1}
  try:
    crabPage = urllib2.urlopen("http://%s:8888/compstatus/"%crabUrl)
    source = crabPage.read()
    m=re.search('<br/><br/>.*GetOutput queue.*<br/>',source,re.DOTALL)
    lasttable=m.group(0)
    k=re.findall('<br/><br/>Jobs in the GetOutput queue: ([0-9]+) Done \+ ([0-9]+) Failed = ([0-9]+).* <br/>',lasttable,re.DOTALL)
    temp['total'] = k[0][-1]
  except Exception, e:
    temp['server'] = crabUrl
    temp['urlavail'] = 0
  return temp 


###############################################################################
### Generate XML file on the basis of the status of all CrabServers
###############################################################################
def generateXML(crabInfo):
  Availability = '100'
  AvailabilityInfo = ""
  furtherInfo = ", which needs expert's attention"

  msgHeader = """<?xml version="1.0" encoding="utf-8" ?>
  <serviceupdate xmlns="http://sls.cern.ch/SLS/XML/update">
  <id>CrabServer</id> """

  msgTrailer = """
  </serviceupdate>"""

  print msgHeader

  reason = ""
  data = ""
  
  url = "https://cmsdoc.cern.ch/cms/LCG/crab/overview/overview.html"
  for i in crabInfo[::1]:
    numericValue = "100"
    serverDetail = i
    if serverDetail['urlavail'] !=0: 
      halfTask = serverDetail['totalTask']/2
      if serverDetail['submitting'] > 50 or serverDetail['msgQueue'] > 1000 or int(serverDetail['GOQueue']) > 6000 or (serverDetail['totalTask'] > 0 and serverDetail['not_submitted'] == serverDetail['totalTask']):
        numericValue = '0'
        Availability = '0'
        if serverDetail['submitting'] > 50:
	  reason = " (submiting queue:"+str(serverDetail['submitting'])+")"
        elif int(serverDetail['GOQueue']) > 6000:
          reason = " with GetOuputQueue: "+str(serverDetail['GOQueue'])
        elif serverDetail['msgQueue'] > 1000:
	  reason = " (MsgQueue:"+str(serverDetail['msgQueue'])+")"
        elif serverDetail['not_submitted'] == serverDetail['totalTask']:
	  url2 = 'http://%s:8888/taskgraph/?tasktype=All&length=1&span=days&type=list' \
        % ( serverDetail['server'] )
	  reason = " (all tasks submission failed:last 24 hours "+url2+") "

        if len(AvailabilityInfo) == 0:
          AvailabilityInfo = serverDetail['server']+reason+" ,is/are in critical phase"+furtherInfo
        else:
          AvailabilityInfo = serverDetail['server']+reason+" and "+AvailabilityInfo
      elif serverDetail['submitting'] > 20 or serverDetail['msgQueue'] > 500 or int(serverDetail['GOQueue']) > 2000 or (halfTask > 0 and serverDetail['not_submitted'] == halfTask):
        numericValue = '70' 
        if Availability != '0':	
          Availability = '70'
        if serverDetail['submitting'] > 20:
          reason = " with submiting queue: "+str(serverDetail['submitting'])
        elif int(serverDetail['GOQueue']) > 2000:
          reason = " with GetOuputQueue: "+str(serverDetail['GOQueue'])
        elif serverDetail['msgQueue'] > 500:
          reason = " with MsgQueue: "+str(serverDetail['msgQueue'])
        elif serverDetail['not_submitted'] == halfTask:
	  url2 = 'http://%s:8888/taskgraph/?tasktype=All&length=1&span=days&type=list' \
        % ( serverDetail['server'] )
          reason = " (50% tasks submission failed:last 24 hours "+url2+") "

        if len(AvailabilityInfo) == 0:
          AvailabilityInfo = serverDetail['server']+reason+" ,is/are effected"+furtherInfo
        else:
          AvailabilityInfo = serverDetail['server']+reason+" and "+AvailabilityInfo
      else:
        if crabInfo[-1] == i and len(AvailabilityInfo) == 0:
          AvailabilityInfo = "All Crab Servers are running smoothly"
    else:
      numericValue = '0'
      Availability = '0'
      if len(AvailabilityInfo) == 0:
        AvailabilityInfo = "Could not contact or got invalid response from the Crab Server : "+serverDetail['server']
      else:
        AvailabilityInfo = "Could not contact or got invalid response from the CrabServer : "+serverDetail['server']+ " and " +AvailabilityInfo
    data = data+"<numericvalue name='"+serverDetail['server']+"'>"+numericValue+"</numericvalue>"
    
  AvailabilityInfo = AvailabilityInfo+", CrabServer Overview Page : "+url
  
  print "    <availability>"+Availability+"</availability>"
  now = time.strftime("%Y-%m-%dT%H:%M:%S", time.localtime())
  print "    <timestamp>"+now+"</timestamp>"
  print "    <availabilityinfo>"+AvailabilityInfo+"</availabilityinfo>"
  print "    <availabilitydesc>https://twiki.cern.ch/twiki/bin/view/CMS/CSAvailabilityComputation</availabilitydesc>"
  print "    <data>"+data+"</data>" 
  print msgTrailer
  return

###############################################################################
### Main Function
###############################################################################

def probeCRABServers():
  availableServers = getAvailableServers()

  # read tasks for the last 1 day
  crabInfo = []
  if availableServers != None :
    for server in availableServers:
      serverConfig = getServerConfig(server['server'])
      if serverConfig != None:
        serverUrl = serverConfig['serverName']
        tasks = crabTaskStatus(serverUrl)
        if tasks['urlavail'] != 0:
          msgQueue = msgQueueParser(serverUrl)
          GOQueue = GOQueueParser(serverUrl)
          tasks['urlavail']=msgQueue['urlavail']
          if msgQueue['urlavail'] != 0:
            tasks['msgQueue'] = msgQueue['total']
            total = crabTotalTasks(serverUrl)
            tasks['urlavail']=total['urlavail']
            if total['urlavail'] != 0:
              tasks['totalTask'] = total['totalTasks']
          if GOQueue['urlavail'] != 0:
            tasks['GOQueue'] = GOQueue['total']
            total = crabTotalTasks(serverUrl)
            tasks['urlavail']=total['urlavail']
            if total['urlavail'] != 0:
              tasks['totalTask'] = total['totalTasks']
      crabInfo.append(tasks)
  generateXML(crabInfo)

###############################################################################
### Call to Main Function
###############################################################################
                                                                                                                                                               
probeCRABServers()
